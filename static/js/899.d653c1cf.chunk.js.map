{"version":3,"file":"static/js/899.d653c1cf.chunk.js","mappings":"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","sources":["../node_modules/fast-deep-equal/index.js","../node_modules/@vis.gl/react-google-maps/src/libraries/api-loading-status.ts","../node_modules/@vis.gl/react-google-maps/src/libraries/google-maps-api-loader.ts","../node_modules/@vis.gl/react-google-maps/src/components/api-provider.tsx","../node_modules/@vis.gl/react-google-maps/src/components/map/use-map-events.ts","../node_modules/@vis.gl/react-google-maps/src/libraries/use-deep-compare-effect.tsx","../node_modules/@vis.gl/react-google-maps/src/components/map/use-map-options.ts","../node_modules/@vis.gl/react-google-maps/src/hooks/use-api-loading-status.ts","../node_modules/@vis.gl/react-google-maps/src/libraries/lat-lng-utils.ts","../node_modules/@vis.gl/react-google-maps/src/components/map/auth-failure-message.tsx","../node_modules/@vis.gl/react-google-maps/src/hooks/use-api-is-loaded.ts","../node_modules/@vis.gl/react-google-maps/src/components/map/use-tracked-camera-state-ref.ts","../node_modules/@vis.gl/react-google-maps/src/libraries/use-force-update.ts","../node_modules/@vis.gl/react-google-maps/src/components/map/use-map-instance.ts","../node_modules/@vis.gl/react-google-maps/src/libraries/use-callback-ref.tsx","../node_modules/@vis.gl/react-google-maps/src/components/map/index.tsx","../node_modules/@vis.gl/react-google-maps/src/components/map/use-map-camera-params.ts","../node_modules/@vis.gl/react-google-maps/src/components/map/use-deckgl-camera-update.ts","../node_modules/@vis.gl/react-google-maps/src/libraries/errors.ts","../node_modules/@vis.gl/react-google-maps/src/hooks/use-map.ts","../node_modules/@vis.gl/react-google-maps/src/hooks/use-maps-library.ts","../node_modules/@vis.gl/react-google-maps/src/libraries/set-value-for-styles.ts","../node_modules/@vis.gl/react-google-maps/src/hooks/use-maps-event-listener.ts","../node_modules/@vis.gl/react-google-maps/src/hooks/use-prop-binding.ts","../node_modules/@vis.gl/react-google-maps/src/components/advanced-marker.tsx","../node_modules/@vis.gl/react-google-maps/src/components/marker.tsx"],"sourcesContent":["'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","export const APILoadingStatus = {\n  NOT_LOADED: 'NOT_LOADED',\n  LOADING: 'LOADING',\n  LOADED: 'LOADED',\n  FAILED: 'FAILED',\n  AUTH_FAILURE: 'AUTH_FAILURE'\n};\nexport type APILoadingStatus =\n  (typeof APILoadingStatus)[keyof typeof APILoadingStatus];\n","import {APILoadingStatus} from './api-loading-status';\n\nexport type ApiParams = {\n  key: string;\n  v?: string;\n  language?: string;\n  region?: string;\n  libraries?: string;\n  solutionChannel?: string;\n  authReferrerPolicy?: string;\n};\n\ntype LoadingStatusCallback = (status: APILoadingStatus) => void;\n\nconst MAPS_API_BASE_URL = 'https://maps.googleapis.com/maps/api/js';\n\n/**\n * A GoogleMapsApiLoader to reliably load and unload the Google Maps JavaScript API.\n *\n * The actual loading and unloading is delayed into the microtask queue, to\n * allow using the API in an useEffect hook, without worrying about multiple API loads.\n */\nexport class GoogleMapsApiLoader {\n  /**\n   * The current loadingStatus of the API.\n   */\n  public static loadingStatus: APILoadingStatus = APILoadingStatus.NOT_LOADED;\n\n  /**\n   * The parameters used for first loading the API.\n   */\n  public static serializedApiParams?: string;\n\n  /**\n   * A list of functions to be notified when the loading status changes.\n   */\n  private static listeners: LoadingStatusCallback[] = [];\n\n  /**\n   * Loads the Maps JavaScript API with the specified parameters.\n   * Since the Maps library can only be loaded once per page, this will\n   * produce a warning when called multiple times with different\n   * parameters.\n   *\n   * The returned promise resolves when loading completes\n   * and rejects in case of an error or when the loading was aborted.\n   */\n  static async load(\n    params: ApiParams,\n    onLoadingStatusChange: (status: APILoadingStatus) => void\n  ): Promise<void> {\n    const libraries = params.libraries ? params.libraries.split(',') : [];\n    const serializedParams = this.serializeParams(params);\n\n    this.listeners.push(onLoadingStatusChange);\n\n    // Note: if `google.maps.importLibrary` has been defined externally, we\n    //   assume that loading is complete and successful.\n    //   If it was defined by a previous call to this method, a warning\n    //   message is logged if there are differences in api-parameters used\n    //   for both calls.\n\n    if (window.google?.maps?.importLibrary as unknown) {\n      // no serialized parameters means it was loaded externally\n      if (!this.serializedApiParams) {\n        this.loadingStatus = APILoadingStatus.LOADED;\n      }\n      this.notifyLoadingStatusListeners();\n    } else {\n      this.serializedApiParams = serializedParams;\n      this.initImportLibrary(params);\n    }\n\n    if (\n      this.serializedApiParams &&\n      this.serializedApiParams !== serializedParams\n    ) {\n      console.warn(\n        `[google-maps-api-loader] The maps API has already been loaded ` +\n          `with different parameters and will not be loaded again. Refresh the ` +\n          `page for new values to have effect.`\n      );\n    }\n\n    const librariesToLoad = ['maps', ...libraries];\n    await Promise.all(\n      librariesToLoad.map(name => google.maps.importLibrary(name))\n    );\n  }\n\n  /**\n   * Serialize the paramters used to load the library for easier comparison.\n   */\n  private static serializeParams(params: ApiParams): string {\n    return [\n      params.v,\n      params.key,\n      params.language,\n      params.region,\n      params.authReferrerPolicy,\n      params.solutionChannel\n    ].join('/');\n  }\n\n  /**\n   * Creates the global `google.maps.importLibrary` function for bootstrapping.\n   * This is essentially a formatted version of the dynamic loading script\n   * from the official documentation with some minor adjustments.\n   *\n   * The created importLibrary function will load the Google Maps JavaScript API,\n   * which will then replace the `google.maps.importLibrary` function with the full\n   * implementation.\n   *\n   * @see https://developers.google.com/maps/documentation/javascript/load-maps-js-api#dynamic-library-import\n   */\n  private static initImportLibrary(params: ApiParams) {\n    if (!window.google) window.google = {} as never;\n    if (!window.google.maps) window.google.maps = {} as never;\n\n    if (window.google.maps['importLibrary']) {\n      console.error(\n        '[google-maps-api-loader-internal]: initImportLibrary must only be called once'\n      );\n\n      return;\n    }\n\n    let apiPromise: Promise<void> | null = null;\n\n    const loadApi = () => {\n      if (apiPromise) return apiPromise;\n\n      apiPromise = new Promise((resolve, reject) => {\n        const scriptElement = document.createElement('script');\n        const urlParams = new URLSearchParams();\n\n        for (const [key, value] of Object.entries(params)) {\n          const urlParamName = key.replace(\n            /[A-Z]/g,\n            t => '_' + t[0].toLowerCase()\n          );\n          urlParams.set(urlParamName, value);\n        }\n        urlParams.set('loading', 'async');\n        urlParams.set('callback', '__googleMapsCallback__');\n\n        scriptElement.async = true;\n        scriptElement.src = MAPS_API_BASE_URL + `?` + urlParams.toString();\n        scriptElement.nonce =\n          (document.querySelector('script[nonce]') as HTMLScriptElement)\n            ?.nonce || '';\n\n        scriptElement.onerror = () => {\n          this.loadingStatus = APILoadingStatus.FAILED;\n          this.notifyLoadingStatusListeners();\n          reject(new Error('The Google Maps JavaScript API could not load.'));\n        };\n\n        window.__googleMapsCallback__ = () => {\n          this.loadingStatus = APILoadingStatus.LOADED;\n          this.notifyLoadingStatusListeners();\n          resolve();\n        };\n\n        window.gm_authFailure = () => {\n          this.loadingStatus = APILoadingStatus.AUTH_FAILURE;\n          this.notifyLoadingStatusListeners();\n        };\n\n        this.loadingStatus = APILoadingStatus.LOADING;\n        this.notifyLoadingStatusListeners();\n\n        document.head.append(scriptElement);\n      });\n\n      return apiPromise;\n    };\n\n    // for the first load, we declare an importLibrary function that will\n    // be overwritten once the api is loaded.\n    google.maps.importLibrary = libraryName =>\n      loadApi().then(() => google.maps.importLibrary(libraryName));\n  }\n\n  /**\n   * Calls all registered loadingStatusListeners after a status update.\n   */\n  private static notifyLoadingStatusListeners() {\n    for (const fn of this.listeners) {\n      fn(this.loadingStatus);\n    }\n  }\n}\n\n// Declare global maps callback functions\ndeclare global {\n  interface Window {\n    __googleMapsCallback__?: () => void;\n    gm_authFailure?: () => void;\n  }\n}\n","import React, {\n  PropsWithChildren,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useState\n} from 'react';\n\nimport {\n  ApiParams,\n  GoogleMapsApiLoader\n} from '../libraries/google-maps-api-loader';\nimport {APILoadingStatus} from '../libraries/api-loading-status';\n\ntype ImportLibraryFunction = typeof google.maps.importLibrary;\ntype GoogleMapsLibrary = Awaited<ReturnType<ImportLibraryFunction>>;\ntype LoadedLibraries = {[name: string]: GoogleMapsLibrary};\n\nexport interface APIProviderContextValue {\n  status: APILoadingStatus;\n  loadedLibraries: LoadedLibraries;\n  importLibrary: typeof google.maps.importLibrary;\n  mapInstances: Record<string, google.maps.Map>;\n  addMapInstance: (map: google.maps.Map, id?: string) => void;\n  removeMapInstance: (id?: string) => void;\n  clearMapInstances: () => void;\n}\n\nconst DEFAULT_SOLUTION_CHANNEL = 'GMP_visgl_rgmlibrary_v1_default';\n\nexport const APIProviderContext =\n  React.createContext<APIProviderContextValue | null>(null);\n\nexport type APIProviderProps = {\n  /**\n   * apiKey must be provided to load the Google Maps JavaScript API. To create an API key, see: https://developers.google.com/maps/documentation/javascript/get-api-key\n   * Part of:\n   */\n  apiKey: string;\n  /**\n   * A custom id to reference the script tag can be provided. The default is set to 'google-maps-api'\n   * @default 'google-maps-api'\n   */\n  libraries?: Array<string>;\n  /**\n   * A specific version of the Google Maps JavaScript API can be used.\n   * Read more about versioning: https://developers.google.com/maps/documentation/javascript/versions\n   * Part of: https://developers.google.com/maps/documentation/javascript/url-params\n   */\n  version?: string;\n  /**\n   * Sets the map to a specific region.\n   * Read more about localizing the Map: https://developers.google.com/maps/documentation/javascript/localization\n   * Part of: https://developers.google.com/maps/documentation/javascript/url-params\n   */\n  region?: string;\n  /**\n   * Use a specific language for the map.\n   * Read more about localizing the Map: https://developers.google.com/maps/documentation/javascript/localization\n   * Part of: https://developers.google.com/maps/documentation/javascript/url-params\n   */\n  language?: string;\n  /**\n   * auth_referrer_policy can be set to 'origin'.\n   * Part of: https://developers.google.com/maps/documentation/javascript/url-params\n   */\n  authReferrerPolicy?: string;\n  /**\n   * To understand usage and ways to improve our solutions, Google includes the\n   * `solution_channel` query parameter in API calls to gather information about\n   * code usage. You may opt out at any time by setting this attribute to an\n   * empty string. Read more in the\n   * [documentation](https://developers.google.com/maps/reporting-and-monitoring/reporting#solutions-usage).\n   */\n  solutionChannel?: string;\n  /**\n   * A function that can be used to execute code after the Google Maps JavaScript API has been loaded.\n   */\n  onLoad?: () => void;\n};\n\n/**\n * local hook to set up the map-instance management context.\n */\nfunction useMapInstances() {\n  const [mapInstances, setMapInstances] = useState<\n    Record<string, google.maps.Map>\n  >({});\n\n  const addMapInstance = (mapInstance: google.maps.Map, id = 'default') => {\n    setMapInstances(instances => ({...instances, [id]: mapInstance}));\n  };\n\n  const removeMapInstance = (id = 'default') => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setMapInstances(({[id]: _, ...remaining}) => remaining);\n  };\n\n  const clearMapInstances = () => {\n    setMapInstances({});\n  };\n\n  return {mapInstances, addMapInstance, removeMapInstance, clearMapInstances};\n}\n\n/**\n * local hook to handle the loading of the maps API, returns the current loading status\n * @param props\n */\nfunction useGoogleMapsApiLoader(props: APIProviderProps) {\n  const {onLoad, apiKey, version, libraries = [], ...otherApiParams} = props;\n\n  const [status, setStatus] = useState<APILoadingStatus>(\n    GoogleMapsApiLoader.loadingStatus\n  );\n  const [loadedLibraries, addLoadedLibrary] = useReducer(\n    (\n      loadedLibraries: LoadedLibraries,\n      action: {name: keyof LoadedLibraries; value: LoadedLibraries[string]}\n    ) => {\n      return {...loadedLibraries, [action.name]: action.value};\n    },\n    {}\n  );\n\n  const librariesString = useMemo(() => libraries?.join(','), [libraries]);\n  const serializedParams = useMemo(\n    () => JSON.stringify({apiKey, version, ...otherApiParams}),\n    [apiKey, version, otherApiParams]\n  );\n\n  const importLibrary: typeof google.maps.importLibrary = useCallback(\n    async (name: string) => {\n      if (loadedLibraries[name]) {\n        return loadedLibraries[name];\n      }\n\n      if (!google?.maps?.importLibrary) {\n        throw new Error(\n          '[api-provider-internal] importLibrary was called before ' +\n            'google.maps.importLibrary was defined.'\n        );\n      }\n\n      const res = await window.google.maps.importLibrary(name);\n      addLoadedLibrary({name, value: res});\n\n      return res;\n    },\n    [loadedLibraries]\n  );\n\n  useEffect(\n    () => {\n      (async () => {\n        try {\n          const params: ApiParams = {key: apiKey, ...otherApiParams};\n          if (version) params.v = version;\n          if (librariesString?.length > 0) params.libraries = librariesString;\n\n          if (params.solutionChannel === undefined)\n            params.solutionChannel = DEFAULT_SOLUTION_CHANNEL;\n          else if (params.solutionChannel === '') delete params.solutionChannel;\n\n          await GoogleMapsApiLoader.load(params, status => setStatus(status));\n\n          for (const name of ['core', 'maps', ...libraries]) {\n            await importLibrary(name);\n          }\n\n          if (onLoad) {\n            onLoad();\n          }\n        } catch (error) {\n          console.error(\n            '<ApiProvider> failed to load the Google Maps JavaScript API',\n            error\n          );\n        }\n      })();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [apiKey, librariesString, serializedParams]\n  );\n\n  return {\n    status,\n    loadedLibraries,\n    importLibrary\n  };\n}\n\n/**\n * Component to wrap the components from this library and load the Google Maps JavaScript API\n */\nexport const APIProvider = (\n  props: PropsWithChildren<APIProviderProps>\n): ReactElement | null => {\n  const {children, ...loaderProps} = props;\n  const {mapInstances, addMapInstance, removeMapInstance, clearMapInstances} =\n    useMapInstances();\n\n  const {status, loadedLibraries, importLibrary} =\n    useGoogleMapsApiLoader(loaderProps);\n\n  const contextValue: APIProviderContextValue = useMemo(\n    () => ({\n      mapInstances,\n      addMapInstance,\n      removeMapInstance,\n      clearMapInstances,\n      status,\n      loadedLibraries,\n      importLibrary\n    }),\n    [\n      mapInstances,\n      addMapInstance,\n      removeMapInstance,\n      clearMapInstances,\n      status,\n      loadedLibraries,\n      importLibrary\n    ]\n  );\n\n  return (\n    <APIProviderContext.Provider value={contextValue}>\n      {children}\n    </APIProviderContext.Provider>\n  );\n};\n","import {useEffect} from 'react';\n\n/**\n * Handlers for all events that could be emitted by map-instances.\n */\nexport type MapEventProps = Partial<{\n  // map view state events\n  onBoundsChanged: (event: MapCameraChangedEvent) => void;\n  onCenterChanged: (event: MapCameraChangedEvent) => void;\n  onHeadingChanged: (event: MapCameraChangedEvent) => void;\n  onTiltChanged: (event: MapCameraChangedEvent) => void;\n  onZoomChanged: (event: MapCameraChangedEvent) => void;\n  onCameraChanged: (event: MapCameraChangedEvent) => void;\n\n  // mouse / touch / pointer events\n  onClick: (event: MapMouseEvent) => void;\n  onDblclick: (event: MapMouseEvent) => void;\n  onContextmenu: (event: MapMouseEvent) => void;\n  onMousemove: (event: MapMouseEvent) => void;\n  onMouseover: (event: MapMouseEvent) => void;\n  onMouseout: (event: MapMouseEvent) => void;\n  onDrag: (event: MapEvent) => void;\n  onDragend: (event: MapEvent) => void;\n  onDragstart: (event: MapEvent) => void;\n\n  // loading events\n  onTilesLoaded: (event: MapEvent) => void;\n  onIdle: (event: MapEvent) => void;\n\n  // configuration events\n  onProjectionChanged: (event: MapEvent) => void;\n  onIsFractionalZoomEnabledChanged: (event: MapEvent) => void;\n  onMapCapabilitiesChanged: (event: MapEvent) => void;\n  onMapTypeIdChanged: (event: MapEvent) => void;\n  onRenderingTypeChanged: (event: MapEvent) => void;\n}>;\n\n/**\n * Sets up effects to bind event-handlers for all event-props in MapEventProps.\n * @internal\n */\nexport function useMapEvents(\n  map: google.maps.Map | null,\n  props: MapEventProps\n) {\n  // note: calling a useEffect hook from within a loop is prohibited by the\n  // rules of hooks, but it's ok here since it's unconditional and the number\n  // and order of iterations is always strictly the same.\n  // (see https://legacy.reactjs.org/docs/hooks-rules.html)\n\n  for (const propName of eventPropNames) {\n    // fixme: this cast is essentially a 'trust me, bro' for typescript, but\n    //   a proper solution seems way too complicated right now\n    const handler = props[propName] as (ev: MapEvent) => void;\n    const eventType = propNameToEventType[propName];\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (!map) return;\n      if (!handler) return;\n\n      const listener = google.maps.event.addListener(\n        map,\n        eventType,\n        (ev?: google.maps.MapMouseEvent | google.maps.IconMouseEvent) => {\n          handler(createMapEvent(eventType, map, ev));\n        }\n      );\n\n      return () => listener.remove();\n    }, [map, eventType, handler]);\n  }\n}\n\n/**\n * Create the wrapped map-events used for the event-props.\n * @param type the event type as it is specified to the maps api\n * @param map the map instance the event originates from\n * @param srcEvent the source-event if there is one.\n */\nfunction createMapEvent(\n  type: string,\n  map: google.maps.Map,\n  srcEvent?: google.maps.MapMouseEvent | google.maps.IconMouseEvent\n): MapEvent {\n  const ev: MapEvent = {\n    type,\n    map,\n    detail: {},\n    stoppable: false,\n    stop: () => {}\n  };\n\n  if (cameraEventTypes.includes(type)) {\n    const camEvent = ev as MapCameraChangedEvent;\n\n    const center = map.getCenter();\n    const zoom = map.getZoom();\n    const heading = map.getHeading() || 0;\n    const tilt = map.getTilt() || 0;\n    const bounds = map.getBounds();\n\n    if (!center || !bounds || !Number.isFinite(zoom)) {\n      console.warn(\n        '[createEvent] at least one of the values from the map ' +\n          'returned undefined. This is not expected to happen. Please ' +\n          'report an issue at https://github.com/visgl/react-google-maps/issues/new'\n      );\n    }\n\n    camEvent.detail = {\n      center: center?.toJSON() || {lat: 0, lng: 0},\n      zoom: (zoom as number) || 0,\n      heading: heading as number,\n      tilt: tilt as number,\n      bounds: bounds?.toJSON() || {\n        north: 90,\n        east: 180,\n        south: -90,\n        west: -180\n      }\n    };\n\n    return camEvent;\n  } else if (mouseEventTypes.includes(type)) {\n    if (!srcEvent)\n      throw new Error('[createEvent] mouse events must provide a srcEvent');\n    const mouseEvent = ev as MapMouseEvent;\n\n    mouseEvent.domEvent = srcEvent.domEvent;\n    mouseEvent.stoppable = true;\n    mouseEvent.stop = () => srcEvent.stop();\n\n    mouseEvent.detail = {\n      latLng: srcEvent.latLng?.toJSON() || null,\n      placeId: (srcEvent as google.maps.IconMouseEvent).placeId\n    };\n\n    return mouseEvent;\n  }\n\n  return ev;\n}\n\n/**\n * maps the camelCased names of event-props to the corresponding event-types\n * used in the maps API.\n */\nconst propNameToEventType: {[prop in keyof Required<MapEventProps>]: string} = {\n  onBoundsChanged: 'bounds_changed',\n  onCenterChanged: 'center_changed',\n  onClick: 'click',\n  onContextmenu: 'contextmenu',\n  onDblclick: 'dblclick',\n  onDrag: 'drag',\n  onDragend: 'dragend',\n  onDragstart: 'dragstart',\n  onHeadingChanged: 'heading_changed',\n  onIdle: 'idle',\n  onIsFractionalZoomEnabledChanged: 'isfractionalzoomenabled_changed',\n  onMapCapabilitiesChanged: 'mapcapabilities_changed',\n  onMapTypeIdChanged: 'maptypeid_changed',\n  onMousemove: 'mousemove',\n  onMouseout: 'mouseout',\n  onMouseover: 'mouseover',\n  onProjectionChanged: 'projection_changed',\n  onRenderingTypeChanged: 'renderingtype_changed',\n  onTilesLoaded: 'tilesloaded',\n  onTiltChanged: 'tilt_changed',\n  onZoomChanged: 'zoom_changed',\n\n  // note: onCameraChanged is an alias for the bounds_changed event,\n  // since that is going to be fired in every situation where the camera is\n  // updated.\n  onCameraChanged: 'bounds_changed'\n} as const;\n\nconst cameraEventTypes = [\n  'bounds_changed',\n  'center_changed',\n  'heading_changed',\n  'tilt_changed',\n  'zoom_changed'\n];\n\nconst mouseEventTypes = [\n  'click',\n  'contextmenu',\n  'dblclick',\n  'mousemove',\n  'mouseout',\n  'mouseover'\n];\n\ntype MapEventPropName = keyof MapEventProps;\nconst eventPropNames = Object.keys(propNameToEventType) as MapEventPropName[];\n\nexport type MapEvent<T = unknown> = {\n  type: string;\n  map: google.maps.Map;\n  detail: T;\n\n  stoppable: boolean;\n  stop: () => void;\n  domEvent?: MouseEvent | TouchEvent | PointerEvent | KeyboardEvent | Event;\n};\n\nexport type MapMouseEvent = MapEvent<{\n  latLng: google.maps.LatLngLiteral | null;\n  placeId: string | null;\n}>;\n\nexport type MapCameraChangedEvent = MapEvent<{\n  center: google.maps.LatLngLiteral;\n  bounds: google.maps.LatLngBoundsLiteral;\n  zoom: number;\n  heading: number;\n  tilt: number;\n}>;\n","import {DependencyList, EffectCallback, useEffect, useRef} from 'react';\nimport isDeepEqual from 'fast-deep-equal';\n\nexport function useDeepCompareEffect(\n  effect: EffectCallback,\n  deps: DependencyList\n) {\n  const ref = useRef<DependencyList | undefined>(undefined);\n\n  if (!ref.current || !isDeepEqual(deps, ref.current)) {\n    ref.current = deps;\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(effect, ref.current);\n}\n","import {MapProps} from '../map';\nimport {useDeepCompareEffect} from '../../libraries/use-deep-compare-effect';\n\nconst mapOptionKeys = new Set([\n  'backgroundColor',\n  'clickableIcons',\n  'controlSize',\n  'disableDefaultUI',\n  'disableDoubleClickZoom',\n  'draggable',\n  'draggableCursor',\n  'draggingCursor',\n  'fullscreenControl',\n  'fullscreenControlOptions',\n  'gestureHandling',\n  'isFractionalZoomEnabled',\n  'keyboardShortcuts',\n  'mapTypeControl',\n  'mapTypeControlOptions',\n  'mapTypeId',\n  'maxZoom',\n  'minZoom',\n  'noClear',\n  'panControl',\n  'panControlOptions',\n  'restriction',\n  'rotateControl',\n  'rotateControlOptions',\n  'scaleControl',\n  'scaleControlOptions',\n  'scrollwheel',\n  'streetView',\n  'streetViewControl',\n  'streetViewControlOptions',\n  'styles',\n  'zoomControl',\n  'zoomControlOptions'\n]);\n\n/**\n * Internal hook to update the map-options when props are changed.\n *\n * @param map the map instance\n * @param mapProps the props to update the map-instance with\n * @internal\n */\nexport function useMapOptions(map: google.maps.Map | null, mapProps: MapProps) {\n  /* eslint-disable react-hooks/exhaustive-deps --\n   *\n   * The following effects aren't triggered when the map is changed.\n   * In that case, the values will be or have been passed to the map\n   * constructor via mapOptions.\n   */\n\n  const mapOptions: google.maps.MapOptions = {};\n  const keys = Object.keys(mapProps) as (keyof google.maps.MapOptions)[];\n  for (const key of keys) {\n    if (!mapOptionKeys.has(key)) continue;\n\n    mapOptions[key] = mapProps[key] as never;\n  }\n\n  // update the map options when mapOptions is changed\n  // Note: due to the destructuring above, mapOptions will be seen as changed\n  //   with every re-render, so we're assuming the maps-api will properly\n  //   deal with unchanged option-values passed into setOptions.\n  useDeepCompareEffect(() => {\n    if (!map) return;\n\n    map.setOptions(mapOptions);\n  }, [mapOptions]);\n  /* eslint-enable react-hooks/exhaustive-deps */\n}\n","import {useContext} from 'react';\nimport {APIProviderContext} from '../components/api-provider';\nimport {APILoadingStatus} from '../libraries/api-loading-status';\n\nexport function useApiLoadingStatus(): APILoadingStatus {\n  return useContext(APIProviderContext)?.status || APILoadingStatus.NOT_LOADED;\n}\n","export function isLatLngLiteral(\n  obj: unknown\n): obj is google.maps.LatLngLiteral {\n  if (!obj || typeof obj !== 'object') return false;\n  if (!('lat' in obj && 'lng' in obj)) return false;\n\n  return Number.isFinite(obj.lat) && Number.isFinite(obj.lng);\n}\n\nexport function latLngEquals(\n  a: google.maps.LatLngLiteral | google.maps.LatLng | undefined | null,\n  b: google.maps.LatLngLiteral | google.maps.LatLng | undefined | null\n): boolean {\n  if (!a || !b) return false;\n  const A = toLatLngLiteral(a);\n  const B = toLatLngLiteral(b);\n  if (A.lat !== B.lat || A.lng !== B.lng) return false;\n  return true;\n}\n\nexport function toLatLngLiteral(\n  obj: google.maps.LatLngLiteral | google.maps.LatLng\n): google.maps.LatLngLiteral {\n  if (isLatLngLiteral(obj)) return obj;\n\n  return obj.toJSON();\n}\n","import React, {CSSProperties} from 'react';\n\nexport const AuthFailureMessage = () => {\n  const style: CSSProperties = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    zIndex: 999,\n    display: 'flex',\n    flexFlow: 'column nowrap',\n    textAlign: 'center',\n    justifyContent: 'center',\n    fontSize: '.8rem',\n    color: 'rgba(0,0,0,0.6)',\n    background: '#dddddd',\n    padding: '1rem 1.5rem'\n  };\n\n  return (\n    <div style={style}>\n      <h2>Error: AuthFailure</h2>\n      <p>\n        A problem with your API key prevents the map from rendering correctly.\n        Please make sure the value of the <code>APIProvider.apiKey</code> prop\n        is correct. Check the error-message in the console for further details.\n      </p>\n    </div>\n  );\n};\n","import {useApiLoadingStatus} from './use-api-loading-status';\nimport {APILoadingStatus} from '../libraries/api-loading-status';\n/**\n * Hook to check if the Maps JavaScript API is loaded\n */\nexport function useApiIsLoaded(): boolean {\n  const status = useApiLoadingStatus();\n\n  return status === APILoadingStatus.LOADED;\n}\n","import {MutableRefObject, useEffect, useRef} from 'react';\nimport {useForceUpdate} from '../../libraries/use-force-update';\n\nexport type CameraState = {\n  center: google.maps.LatLngLiteral;\n  heading: number;\n  tilt: number;\n  zoom: number;\n};\n\nexport type CameraStateRef = MutableRefObject<CameraState>;\n\nfunction handleBoundsChange(map: google.maps.Map, ref: CameraStateRef) {\n  const center = map.getCenter();\n  const zoom = map.getZoom();\n  const heading = map.getHeading() || 0;\n  const tilt = map.getTilt() || 0;\n  const bounds = map.getBounds();\n\n  if (!center || !bounds || !Number.isFinite(zoom)) {\n    console.warn(\n      '[useTrackedCameraState] at least one of the values from the map ' +\n        'returned undefined. This is not expected to happen. Please ' +\n        'report an issue at https://github.com/visgl/react-google-maps/issues/new'\n    );\n  }\n\n  // fixme: do we need the `undefined` cases for the camera-params? When are they used in the maps API?\n  Object.assign(ref.current, {\n    center: center?.toJSON() || {lat: 0, lng: 0},\n    zoom: (zoom as number) || 0,\n    heading: heading as number,\n    tilt: tilt as number\n  });\n}\n\n/**\n * Creates a mutable ref object to track the last known state of the map camera.\n * This is used in `useMapCameraParams` to reduce stuttering in normal operation\n * by avoiding updates of the map camera with values that have already been processed.\n */\nexport function useTrackedCameraStateRef(\n  map: google.maps.Map | null\n): CameraStateRef {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef<CameraState>({\n    center: {lat: 0, lng: 0},\n    heading: 0,\n    tilt: 0,\n    zoom: 0\n  });\n\n  // Record camera state with every bounds_changed event dispatched by the map.\n  // This data is used to prevent feeding these values back to the\n  // map-instance when a typical \"controlled component\" setup (state variable is\n  // fed into and updated by the map).\n  useEffect(() => {\n    if (!map) return;\n\n    const listener = google.maps.event.addListener(\n      map,\n      'bounds_changed',\n      () => {\n        handleBoundsChange(map, ref);\n\n        // When an event is occured, we have to update during the next cycle.\n        // The application could decide to ignore the event and not update any\n        // camera props of the map, meaning that in that case we will have to\n        // 'undo' the change to the camera.\n        forceUpdate();\n      }\n    );\n\n    return () => listener.remove();\n  }, [map, forceUpdate]);\n\n  return ref;\n}\n","import {useReducer} from 'react';\n\nexport function useForceUpdate(): () => void {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n\n  return forceUpdate;\n}\n","import {Ref, useEffect, useRef, useState} from 'react';\n\nimport {MapProps} from '../map';\nimport {APIProviderContextValue} from '../api-provider';\n\nimport {useCallbackRef} from '../../libraries/use-callback-ref';\nimport {useApiIsLoaded} from '../../hooks/use-api-is-loaded';\nimport {\n  CameraState,\n  CameraStateRef,\n  useTrackedCameraStateRef\n} from './use-tracked-camera-state-ref';\n\n/**\n * Stores a stack of map-instances for each mapId. Whenever an\n * instance is used, it is removed from the stack while in use,\n * and returned to the stack when the component unmounts.\n * This allows us to correctly implement caching for multiple\n * maps om the same page, while reusing as much as possible.\n *\n * FIXME: while it should in theory be possible to reuse maps solely\n *   based on the mapId (as all other parameters can be changed at\n *   runtime), we don't yet have good enough tracking of options to\n *   reliably unset all the options that have been set.\n */\nclass CachedMapStack {\n  static entries: {[key: string]: google.maps.Map[]} = {};\n\n  static has(key: string) {\n    return this.entries[key] && this.entries[key].length > 0;\n  }\n\n  static pop(key: string) {\n    if (!this.entries[key]) return null;\n\n    return this.entries[key].pop() || null;\n  }\n\n  static push(key: string, value: google.maps.Map) {\n    if (!this.entries[key]) this.entries[key] = [];\n\n    this.entries[key].push(value);\n  }\n}\n\n/**\n * The main hook takes care of creating map-instances and registering them in\n * the api-provider context.\n * @return a tuple of the map-instance created (or null) and the callback\n *   ref that will be used to pass the map-container into this hook.\n * @internal\n */\nexport function useMapInstance(\n  props: MapProps,\n  context: APIProviderContextValue\n): readonly [\n  map: google.maps.Map | null,\n  containerRef: Ref<HTMLDivElement>,\n  cameraStateRef: CameraStateRef\n] {\n  const apiIsLoaded = useApiIsLoaded();\n  const [map, setMap] = useState<google.maps.Map | null>(null);\n  const [container, containerRef] = useCallbackRef<HTMLDivElement>();\n\n  const cameraStateRef = useTrackedCameraStateRef(map);\n\n  const {\n    id,\n    defaultBounds,\n    defaultCenter,\n    defaultZoom,\n    defaultHeading,\n    defaultTilt,\n    reuseMaps,\n\n    ...mapOptions\n  } = props;\n\n  const hasZoom = props.zoom !== undefined || props.defaultZoom !== undefined;\n  const hasCenter =\n    props.center !== undefined || props.defaultCenter !== undefined;\n\n  if (!defaultBounds && (!hasZoom || !hasCenter)) {\n    console.warn(\n      '<Map> component is missing configuration. ' +\n        'You have to provide zoom and center (via the `zoom`/`defaultZoom` and ' +\n        '`center`/`defaultCenter` props) or specify the region to show using ' +\n        '`defaultBounds`. See ' +\n        'https://visgl.github.io/react-google-maps/docs/api-reference/components/map#required'\n    );\n  }\n\n  // apply default camera props if available and not overwritten by controlled props\n  if (!mapOptions.center && defaultCenter) mapOptions.center = defaultCenter;\n  if (!mapOptions.zoom && Number.isFinite(defaultZoom))\n    mapOptions.zoom = defaultZoom;\n  if (!mapOptions.heading && Number.isFinite(defaultHeading))\n    mapOptions.heading = defaultHeading;\n  if (!mapOptions.tilt && Number.isFinite(defaultTilt))\n    mapOptions.tilt = defaultTilt;\n\n  for (const key of Object.keys(mapOptions) as (keyof typeof mapOptions)[])\n    if (mapOptions[key] === undefined) delete mapOptions[key];\n\n  const savedMapStateRef = useRef<{\n    mapId?: string | null;\n    cameraState: CameraState;\n  }>();\n\n  // create the map instance and register it in the context\n  useEffect(\n    () => {\n      if (!container || !apiIsLoaded) return;\n\n      const {addMapInstance, removeMapInstance} = context;\n\n      const mapId = props.mapId;\n      const cacheKey = mapId || 'default';\n      let mapDiv: HTMLElement;\n      let map: google.maps.Map;\n\n      if (reuseMaps && CachedMapStack.has(cacheKey)) {\n        map = CachedMapStack.pop(cacheKey) as google.maps.Map;\n        mapDiv = map.getDiv();\n\n        container.appendChild(mapDiv);\n        map.setOptions(mapOptions);\n\n        // detaching the element from the DOM lets the map fall back to its default\n        // size, setting the center will trigger reloading the map.\n        setTimeout(() => map.setCenter(map.getCenter()!), 0);\n      } else {\n        mapDiv = document.createElement('div');\n        mapDiv.style.height = '100%';\n        container.appendChild(mapDiv);\n        map = new google.maps.Map(mapDiv, mapOptions);\n      }\n\n      setMap(map);\n      addMapInstance(map, id);\n\n      if (defaultBounds) {\n        map.fitBounds(defaultBounds);\n      }\n\n      // prevent map not rendering due to missing configuration\n      else if (!hasZoom || !hasCenter) {\n        map.fitBounds({east: 180, west: -180, south: -90, north: 90});\n      }\n\n      // the savedMapState is used to restore the camera parameters when the mapId is changed\n      if (savedMapStateRef.current) {\n        const {mapId: savedMapId, cameraState: savedCameraState} =\n          savedMapStateRef.current;\n        if (savedMapId !== mapId) {\n          map.setOptions(savedCameraState);\n        }\n      }\n\n      return () => {\n        savedMapStateRef.current = {\n          mapId,\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          cameraState: cameraStateRef.current\n        };\n\n        // detach the map-div from the dom\n        mapDiv.remove();\n\n        if (reuseMaps) {\n          // push back on the stack\n          CachedMapStack.push(cacheKey, map);\n        } else {\n          // remove all event-listeners to minimize the possibility of memory-leaks\n          google.maps.event.clearInstanceListeners(map);\n        }\n\n        setMap(null);\n        removeMapInstance(id);\n      };\n    },\n\n    // some dependencies are ignored in the list below:\n    //  - defaultBounds and the default* camera props will only be used once, and\n    //    changes should be ignored\n    //  - mapOptions has special hooks that take care of updating the options\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [container, apiIsLoaded, id, props.mapId]\n  );\n\n  return [map, containerRef, cameraStateRef] as const;\n}\n","import {Ref, useCallback, useState} from 'react';\n\nexport function useCallbackRef<T>() {\n  const [el, setEl] = useState<T | null>(null);\n  const ref = useCallback((value: T) => setEl(value), [setEl]);\n\n  return [el, ref as Ref<T>] as const;\n}\n","/* eslint-disable complexity */\nimport React, {\n  CSSProperties,\n  PropsWithChildren,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useMemo\n} from 'react';\n\nimport {APIProviderContext} from '../api-provider';\n\nimport {MapEventProps, useMapEvents} from './use-map-events';\nimport {useMapOptions} from './use-map-options';\nimport {useApiLoadingStatus} from '../../hooks/use-api-loading-status';\nimport {APILoadingStatus} from '../../libraries/api-loading-status';\nimport {\n  DeckGlCompatProps,\n  useDeckGLCameraUpdate\n} from './use-deckgl-camera-update';\nimport {toLatLngLiteral} from '../../libraries/lat-lng-utils';\nimport {useMapCameraParams} from './use-map-camera-params';\nimport {AuthFailureMessage} from './auth-failure-message';\nimport {useMapInstance} from './use-map-instance';\n\nexport interface GoogleMapsContextValue {\n  map: google.maps.Map | null;\n}\nexport const GoogleMapsContext =\n  React.createContext<GoogleMapsContextValue | null>(null);\n\nexport type {\n  MapCameraChangedEvent,\n  MapEvent,\n  MapEventProps,\n  MapMouseEvent\n} from './use-map-events';\n\nexport type MapCameraProps = {\n  center: google.maps.LatLngLiteral;\n  zoom: number;\n  heading?: number;\n  tilt?: number;\n};\n\n/**\n * Props for the Map Component\n */\nexport type MapProps = google.maps.MapOptions &\n  MapEventProps &\n  DeckGlCompatProps & {\n    /**\n     * An id for the map, this is required when multiple maps are present\n     * in the same APIProvider context.\n     */\n    id?: string;\n    /**\n     * Additional style rules to apply to the map dom-element.\n     */\n    style?: CSSProperties;\n    /**\n     * Additional css class-name to apply to the element containing the map.\n     */\n    className?: string;\n    /**\n     * Indicates that the map will be controlled externally. Disables all controls provided by the map itself.\n     */\n    controlled?: boolean;\n\n    /**\n     * Enable caching of map-instances created by this component.\n     */\n    reuseMaps?: boolean;\n\n    defaultCenter?: google.maps.LatLngLiteral;\n    defaultZoom?: number;\n    defaultHeading?: number;\n    defaultTilt?: number;\n    /**\n     * Alternative way to specify the default camera props as a geographic region that should be fully visible\n     */\n    defaultBounds?: google.maps.LatLngBoundsLiteral;\n  };\n\nexport const Map = (props: PropsWithChildren<MapProps>) => {\n  const {children, id, className, style} = props;\n  const context = useContext(APIProviderContext);\n  const loadingStatus = useApiLoadingStatus();\n\n  if (!context) {\n    throw new Error(\n      '<Map> can only be used inside an <ApiProvider> component.'\n    );\n  }\n\n  const [map, mapRef, cameraStateRef] = useMapInstance(props, context);\n\n  useMapCameraParams(map, cameraStateRef, props);\n  useMapEvents(map, props);\n  useMapOptions(map, props);\n\n  const isDeckGlControlled = useDeckGLCameraUpdate(map, props);\n  const isControlledExternally = !!props.controlled;\n\n  // disable interactions with the map for externally controlled maps\n  useEffect(() => {\n    if (!map) return;\n\n    // fixme: this doesn't seem to belong here (and it's mostly there for convenience anyway).\n    //   The reasoning is that a deck.gl canvas will be put on top of the map, rendering\n    //   any default map controls pretty much useless\n    if (isDeckGlControlled) {\n      map.setOptions({disableDefaultUI: true});\n    }\n\n    // disable all control-inputs when the map is controlled externally\n    if (isDeckGlControlled || isControlledExternally) {\n      map.setOptions({\n        gestureHandling: 'none',\n        keyboardShortcuts: false\n      });\n    }\n\n    return () => {\n      map.setOptions({\n        gestureHandling: props.gestureHandling,\n        keyboardShortcuts: props.keyboardShortcuts\n      });\n    };\n  }, [\n    map,\n    isDeckGlControlled,\n    isControlledExternally,\n    props.gestureHandling,\n    props.keyboardShortcuts\n  ]);\n\n  // setup a stable cameraOptions object that can be used as dependency\n  const center = props.center ? toLatLngLiteral(props.center) : null;\n  let lat: number | null = null;\n  let lng: number | null = null;\n  if (center && Number.isFinite(center.lat) && Number.isFinite(center.lng)) {\n    lat = center.lat as number;\n    lng = center.lng as number;\n  }\n\n  const cameraOptions: google.maps.CameraOptions = useMemo(() => {\n    return {\n      center: {lat: lat ?? 0, lng: lng ?? 0},\n      zoom: props.zoom ?? 0,\n      heading: props.heading ?? 0,\n      tilt: props.tilt ?? 0\n    };\n  }, [lat, lng, props.zoom, props.heading, props.tilt]);\n\n  // externally controlled mode: reject all camera changes that don't correspond to changes in props\n  useLayoutEffect(() => {\n    if (!map || !isControlledExternally) return;\n\n    map.moveCamera(cameraOptions);\n    const listener = map.addListener('bounds_changed', () => {\n      map.moveCamera(cameraOptions);\n    });\n\n    return () => listener.remove();\n  }, [map, isControlledExternally, cameraOptions]);\n\n  const combinedStyle: CSSProperties = useMemo(\n    () => ({\n      width: '100%',\n      height: '100%',\n      position: 'relative',\n      // when using deckgl, the map should be sent to the back\n      zIndex: isDeckGlControlled ? -1 : 0,\n\n      ...style\n    }),\n    [style, isDeckGlControlled]\n  );\n\n  const contextValue: GoogleMapsContextValue = useMemo(() => ({map}), [map]);\n\n  if (loadingStatus === APILoadingStatus.AUTH_FAILURE) {\n    return (\n      <div\n        style={{position: 'relative', ...(className ? {} : combinedStyle)}}\n        className={className}>\n        <AuthFailureMessage />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={mapRef}\n      data-testid={'map'}\n      style={className ? undefined : combinedStyle}\n      className={className}\n      {...(id ? {id} : {})}>\n      {map ? (\n        <GoogleMapsContext.Provider value={contextValue}>\n          {children}\n        </GoogleMapsContext.Provider>\n      ) : null}\n    </div>\n  );\n};\nMap.deckGLViewProps = true;\n","import {useLayoutEffect} from 'react';\nimport {CameraStateRef} from './use-tracked-camera-state-ref';\nimport {toLatLngLiteral} from '../../libraries/lat-lng-utils';\nimport {MapProps} from '../map';\n\nexport function useMapCameraParams(\n  map: google.maps.Map | null,\n  cameraStateRef: CameraStateRef,\n  mapProps: MapProps\n) {\n  const center = mapProps.center ? toLatLngLiteral(mapProps.center) : null;\n\n  let lat: number | null = null;\n  let lng: number | null = null;\n\n  if (center && Number.isFinite(center.lat) && Number.isFinite(center.lng)) {\n    lat = center.lat as number;\n    lng = center.lng as number;\n  }\n\n  const zoom: number | null = Number.isFinite(mapProps.zoom)\n    ? (mapProps.zoom as number)\n    : null;\n  const heading: number | null = Number.isFinite(mapProps.heading)\n    ? (mapProps.heading as number)\n    : null;\n  const tilt: number | null = Number.isFinite(mapProps.tilt)\n    ? (mapProps.tilt as number)\n    : null;\n\n  // the following effect runs for every render of the map component and checks\n  // if there are differences between the known state of the map instance\n  // (cameraStateRef, which is updated by all bounds_changed events) and the\n  // desired state in the props.\n\n  useLayoutEffect(() => {\n    if (!map) return;\n\n    const nextCamera: google.maps.CameraOptions = {};\n    let needsUpdate = false;\n\n    if (\n      lat !== null &&\n      lng !== null &&\n      (cameraStateRef.current.center.lat !== lat ||\n        cameraStateRef.current.center.lng !== lng)\n    ) {\n      nextCamera.center = {lat, lng};\n      needsUpdate = true;\n    }\n\n    if (zoom !== null && cameraStateRef.current.zoom !== zoom) {\n      nextCamera.zoom = zoom as number;\n      needsUpdate = true;\n    }\n\n    if (heading !== null && cameraStateRef.current.heading !== heading) {\n      nextCamera.heading = heading as number;\n      needsUpdate = true;\n    }\n\n    if (tilt !== null && cameraStateRef.current.tilt !== tilt) {\n      nextCamera.tilt = tilt as number;\n      needsUpdate = true;\n    }\n\n    if (needsUpdate) {\n      map.moveCamera(nextCamera);\n    }\n  });\n}\n","import {useLayoutEffect} from 'react';\n\nexport type DeckGlCompatProps = {\n  /**\n   * Viewport from deck.gl\n   */\n  viewport?: unknown;\n  /**\n   * View state from deck.gl\n   */\n  viewState?: Record<string, unknown>;\n  /**\n   * Initial View State from deck.gl\n   */\n  initialViewState?: Record<string, unknown>;\n};\n\n/**\n * Internal hook that updates the camera when deck.gl viewState changes.\n * @internal\n */\nexport function useDeckGLCameraUpdate(\n  map: google.maps.Map | null,\n  props: DeckGlCompatProps\n) {\n  const {viewport, viewState} = props;\n  const isDeckGlControlled = !!viewport;\n\n  useLayoutEffect(() => {\n    if (!map || !viewState) return;\n\n    const {\n      latitude,\n      longitude,\n      bearing: heading,\n      pitch: tilt,\n      zoom\n    } = viewState as Record<string, number>;\n\n    map.moveCamera({\n      center: {lat: latitude, lng: longitude},\n      heading,\n      tilt,\n      zoom: zoom + 1\n    });\n  }, [map, viewState]);\n\n  return isDeckGlControlled;\n}\n","const shownMessages = new Set();\n\nexport function logErrorOnce(...args: Parameters<typeof console.error>) {\n  const key = JSON.stringify(args);\n\n  if (!shownMessages.has(key)) {\n    shownMessages.add(key);\n\n    console.error(...args);\n  }\n}\n","import {useContext} from 'react';\n\nimport {APIProviderContext} from '../components/api-provider';\nimport {GoogleMapsContext} from '../components/map';\nimport {logErrorOnce} from '../libraries/errors';\n\n/**\n * Retrieves a map-instance from the context. This is either an instance\n * identified by id or the parent map instance if no id is specified.\n * Returns null if neither can be found.\n */\nexport const useMap = (id: string | null = null): google.maps.Map | null => {\n  const ctx = useContext(APIProviderContext);\n  const {map} = useContext(GoogleMapsContext) || {};\n\n  if (ctx === null) {\n    logErrorOnce(\n      'useMap(): failed to retrieve APIProviderContext. ' +\n        'Make sure that the <APIProvider> component exists and that the ' +\n        'component you are calling `useMap()` from is a sibling of the ' +\n        '<APIProvider>.'\n    );\n\n    return null;\n  }\n\n  const {mapInstances} = ctx;\n\n  // if an id is specified, the corresponding map or null is returned\n  if (id !== null) return mapInstances[id] || null;\n\n  // otherwise, return the closest ancestor\n  if (map) return map;\n\n  // finally, return the default map instance\n  return mapInstances['default'] || null;\n};\n","import {useContext, useEffect} from 'react';\n\nimport {APIProviderContext} from '../components/api-provider';\nimport {useApiIsLoaded} from './use-api-is-loaded';\n\ninterface ApiLibraries {\n  core: google.maps.CoreLibrary;\n  maps: google.maps.MapsLibrary;\n  places: google.maps.PlacesLibrary;\n  geocoding: google.maps.GeocodingLibrary;\n  routes: google.maps.RoutesLibrary;\n  marker: google.maps.MarkerLibrary;\n  geometry: google.maps.GeometryLibrary;\n  elevation: google.maps.ElevationLibrary;\n  streetView: google.maps.StreetViewLibrary;\n  journeySharing: google.maps.JourneySharingLibrary;\n  drawing: google.maps.DrawingLibrary;\n  visualization: google.maps.VisualizationLibrary;\n}\n\nexport function useMapsLibrary<\n  K extends keyof ApiLibraries,\n  V extends ApiLibraries[K]\n>(name: K): V | null;\n\nexport function useMapsLibrary(name: string) {\n  const apiIsLoaded = useApiIsLoaded();\n  const ctx = useContext(APIProviderContext);\n\n  useEffect(() => {\n    if (!apiIsLoaded || !ctx) return;\n\n    // Trigger loading the libraries via our proxy-method.\n    // The returned promise is ignored, since importLibrary will update loadedLibraries\n    // list in the context, triggering a re-render.\n    void ctx.importLibrary(name);\n  }, [apiIsLoaded, ctx, name]);\n\n  return ctx?.loadedLibraries[name] || null;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/*\n * The code in this file was adapted from the internal react-dom-bindings package.\n * https://github.com/facebook/react/tree/4508873393058e86bed308b56e49ec883ece59d1/packages/react-dom-bindings\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport {CSSProperties} from 'react';\n\nexport function setValueForStyles(\n  element: HTMLElement,\n  styles: CSSProperties | null,\n  prevStyles: CSSProperties | null\n) {\n  if (styles != null && typeof styles !== 'object') {\n    throw new Error(\n      'The `style` prop expects a mapping from style properties to values, ' +\n        \"not a string. For example, style={{marginRight: spacing + 'em'}} when \" +\n        'using JSX.'\n    );\n  }\n\n  const elementStyle = element.style;\n\n  // without `prevStyles`, just set all values\n  if (prevStyles == null) {\n    if (styles == null) return;\n\n    for (const styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) continue;\n\n      setValueForStyle(\n        elementStyle,\n        styleName,\n        styles[styleName as keyof CSSProperties]\n      );\n    }\n\n    return;\n  }\n\n  // unset all styles in `prevStyles` that aren't in `styles`\n  for (const styleName in prevStyles) {\n    if (\n      prevStyles.hasOwnProperty(styleName) &&\n      (styles == null || !styles.hasOwnProperty(styleName))\n    ) {\n      // Clear style\n      const isCustomProperty = styleName.indexOf('--') === 0;\n      if (isCustomProperty) {\n        elementStyle.setProperty(styleName, '');\n      } else if (styleName === 'float') {\n        elementStyle.cssFloat = '';\n      } else {\n        elementStyle[styleName as any] = '';\n      }\n    }\n  }\n\n  // only assign values from `styles` that are different from `prevStyles`\n  if (styles == null) return;\n\n  for (const styleName in styles) {\n    const value = styles[styleName as keyof CSSProperties];\n    if (\n      styles.hasOwnProperty(styleName) &&\n      prevStyles[styleName as keyof CSSProperties] !== value\n    ) {\n      setValueForStyle(elementStyle, styleName, value);\n    }\n  }\n}\n\nfunction setValueForStyle(\n  elementStyle: CSSStyleDeclaration,\n  styleName: string,\n  value: unknown\n) {\n  const isCustomProperty = styleName.indexOf('--') === 0;\n\n  // falsy values will unset the style property\n  if (value == null || typeof value === 'boolean' || value === '') {\n    if (isCustomProperty) {\n      elementStyle.setProperty(styleName, '');\n    } else if (styleName === 'float') {\n      elementStyle.cssFloat = '';\n    } else {\n      elementStyle[styleName as any] = '';\n    }\n  }\n\n  // custom properties can't be directly assigned\n  else if (isCustomProperty) {\n    elementStyle.setProperty(styleName, value as string);\n  }\n\n  // numeric values are treated as 'px' unless the style property expects unitless numbers\n  else if (\n    typeof value === 'number' &&\n    value !== 0 &&\n    !isUnitlessNumber(styleName)\n  ) {\n    elementStyle[styleName as any] = value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\n  }\n\n  // everything else can just be assigned\n  else {\n    if (styleName === 'float') {\n      elementStyle.cssFloat = value as string;\n    } else {\n      elementStyle[styleName as any] = ('' + value).trim();\n    }\n  }\n}\n\n// CSS properties which accept numbers but are not in units of \"px\".\nconst unitlessNumbers = new Set([\n  'animationIterationCount',\n  'aspectRatio',\n  'borderImageOutset',\n  'borderImageSlice',\n  'borderImageWidth',\n  'boxFlex',\n  'boxFlexGroup',\n  'boxOrdinalGroup',\n  'columnCount',\n  'columns',\n  'flex',\n  'flexGrow',\n  'flexPositive',\n  'flexShrink',\n  'flexNegative',\n  'flexOrder',\n  'gridArea',\n  'gridRow',\n  'gridRowEnd',\n  'gridRowSpan',\n  'gridRowStart',\n  'gridColumn',\n  'gridColumnEnd',\n  'gridColumnSpan',\n  'gridColumnStart',\n  'fontWeight',\n  'lineClamp',\n  'lineHeight',\n  'opacity',\n  'order',\n  'orphans',\n  'scale',\n  'tabSize',\n  'widows',\n  'zIndex',\n  'zoom',\n  'fillOpacity', // SVG-related properties\n  'floodOpacity',\n  'stopOpacity',\n  'strokeDasharray',\n  'strokeDashoffset',\n  'strokeMiterlimit',\n  'strokeOpacity',\n  'strokeWidth'\n]);\nfunction isUnitlessNumber(name: string): boolean {\n  return unitlessNumbers.has(name);\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {useEffect} from 'react';\n\n/**\n * Internally used to bind events to Maps JavaScript API objects.\n * @internal\n */\nexport function useMapsEventListener<T extends (...args: any[]) => void>(\n  target?: object | null,\n  name?: string,\n  callback?: T | null\n) {\n  useEffect(() => {\n    if (!target || !name || !callback) return;\n\n    const listener = google.maps.event.addListener(target, name, callback);\n\n    return () => listener.remove();\n  }, [target, name, callback]);\n}\n","import {useEffect} from 'react';\n\n/**\n * Internally used to copy values from props into API-Objects\n * whenever they change.\n *\n * @example\n *   usePropBinding(marker, 'position', position);\n *\n * @internal\n */\nexport function usePropBinding<T extends object, K extends keyof T>(\n  object: T | null,\n  prop: K,\n  value: T[K]\n) {\n  useEffect(() => {\n    if (!object) return;\n\n    object[prop] = value;\n  }, [object, prop, value]);\n}\n","/* eslint-disable complexity */\nimport React, {\n  Children,\n  CSSProperties,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\n\nimport {createPortal} from 'react-dom';\nimport {useMap} from '../hooks/use-map';\nimport {useMapsLibrary} from '../hooks/use-maps-library';\nimport {setValueForStyles} from '../libraries/set-value-for-styles';\n\nimport type {Ref, PropsWithChildren} from 'react';\nimport {useMapsEventListener} from '../hooks/use-maps-event-listener';\nimport {usePropBinding} from '../hooks/use-prop-binding';\n\nexport interface AdvancedMarkerContextValue {\n  marker: google.maps.marker.AdvancedMarkerElement;\n}\n\n/**\n * Copy of the `google.maps.CollisionBehavior` constants.\n * They have to be duplicated here since we can't wait for the maps API to load to be able to use them.\n */\nexport const CollisionBehavior = {\n  REQUIRED: 'REQUIRED',\n  REQUIRED_AND_HIDES_OPTIONAL: 'REQUIRED_AND_HIDES_OPTIONAL',\n  OPTIONAL_AND_HIDES_LOWER_PRIORITY: 'OPTIONAL_AND_HIDES_LOWER_PRIORITY'\n} as const;\nexport type CollisionBehavior =\n  (typeof CollisionBehavior)[keyof typeof CollisionBehavior];\n\nexport const AdvancedMarkerContext =\n  React.createContext<AdvancedMarkerContextValue | null>(null);\n\ntype AdvancedMarkerEventProps = {\n  onClick?: (e: google.maps.MapMouseEvent) => void;\n  onDrag?: (e: google.maps.MapMouseEvent) => void;\n  onDragStart?: (e: google.maps.MapMouseEvent) => void;\n  onDragEnd?: (e: google.maps.MapMouseEvent) => void;\n};\n\nexport type AdvancedMarkerProps = PropsWithChildren<\n  Omit<\n    google.maps.marker.AdvancedMarkerElementOptions,\n    'gmpDraggable' | 'gmpClickable' | 'content' | 'map' | 'collisionBehavior'\n  > &\n    AdvancedMarkerEventProps & {\n      draggable?: boolean;\n      clickable?: boolean;\n      collisionBehavior?: CollisionBehavior;\n      /**\n       * A className for the content element.\n       * (can only be used with HTML Marker content)\n       */\n      className?: string;\n      /**\n       * Additional styles to apply to the content element.\n       */\n      style?: CSSProperties;\n    }\n>;\n\nexport type AdvancedMarkerRef = google.maps.marker.AdvancedMarkerElement | null;\nfunction useAdvancedMarker(props: AdvancedMarkerProps) {\n  const [marker, setMarker] =\n    useState<google.maps.marker.AdvancedMarkerElement | null>(null);\n  const [contentContainer, setContentContainer] =\n    useState<HTMLDivElement | null>(null);\n\n  const prevStyleRef = useRef<CSSProperties | null>(null);\n\n  const map = useMap();\n  const markerLibrary = useMapsLibrary('marker');\n\n  const {\n    children,\n    className,\n    style,\n    onClick,\n    onDrag,\n    onDragStart,\n    onDragEnd,\n    collisionBehavior,\n    clickable,\n    draggable,\n    position,\n    title,\n    zIndex\n  } = props;\n\n  const numChildren = Children.count(children);\n\n  // create an AdvancedMarkerElement instance and add it to the map once available\n  useEffect(() => {\n    if (!map || !markerLibrary) return;\n\n    const newMarker = new markerLibrary.AdvancedMarkerElement();\n    newMarker.map = map;\n\n    setMarker(newMarker);\n\n    // create the container for marker content if there are children\n    let contentElement: HTMLDivElement | null = null;\n    if (numChildren > 0) {\n      contentElement = document.createElement('div');\n\n      newMarker.content = contentElement;\n      setContentContainer(contentElement);\n    }\n\n    return () => {\n      newMarker.map = null;\n      contentElement?.remove();\n      setMarker(null);\n      setContentContainer(null);\n    };\n  }, [map, markerLibrary, numChildren]);\n\n  // update className and styles of marker.content element\n  useEffect(() => {\n    if (!marker || !marker.content) return;\n\n    (marker.content as HTMLElement).className = className || '';\n  }, [marker, className]);\n\n  usePropBinding(contentContainer, 'className', className ?? '');\n  useEffect(() => {\n    if (!contentContainer) return;\n\n    setValueForStyles(contentContainer, style || null, prevStyleRef.current);\n    prevStyleRef.current = style || null;\n  }, [contentContainer, className, style]);\n\n  // copy other props\n  usePropBinding(marker, 'position', position);\n  usePropBinding(marker, 'title', title ?? '');\n  usePropBinding(marker, 'zIndex', zIndex);\n  usePropBinding(\n    marker,\n    'collisionBehavior',\n    collisionBehavior as google.maps.CollisionBehavior\n  );\n\n  // set gmpDraggable from props (when unspecified, it's true if any drag-event\n  // callbacks are specified)\n  useEffect(() => {\n    if (!marker) return;\n\n    if (draggable !== undefined) marker.gmpDraggable = draggable;\n    else if (onDrag || onDragStart || onDragEnd) marker.gmpDraggable = true;\n    else marker.gmpDraggable = false;\n  }, [marker, draggable, onDrag, onDragEnd, onDragStart]);\n\n  // set gmpClickable from props (when unspecified, it's true if the onClick event\n  // callback is specified)\n  useEffect(() => {\n    if (!marker) return;\n\n    if (clickable !== undefined) marker.gmpClickable = clickable;\n    else if (onClick) marker.gmpClickable = true;\n    else marker.gmpClickable = false;\n  }, [marker, clickable, onClick]);\n\n  useMapsEventListener(marker, 'click', onClick);\n  useMapsEventListener(marker, 'drag', onDrag);\n  useMapsEventListener(marker, 'dragstart', onDragStart);\n  useMapsEventListener(marker, 'dragend', onDragEnd);\n\n  return [marker, contentContainer] as const;\n}\n\nexport const AdvancedMarker = forwardRef(\n  (props: AdvancedMarkerProps, ref: Ref<AdvancedMarkerRef>) => {\n    const {children} = props;\n    const [marker, contentContainer] = useAdvancedMarker(props);\n\n    const advancedMarkerContextValue: AdvancedMarkerContextValue | null =\n      useMemo(() => (marker ? {marker} : null), [marker]);\n\n    useImperativeHandle(ref, () => marker, [marker]);\n\n    if (!contentContainer) return null;\n\n    return (\n      <AdvancedMarkerContext.Provider value={advancedMarkerContextValue}>\n        {createPortal(children, contentContainer)}\n      </AdvancedMarkerContext.Provider>\n    );\n  }\n);\n\nexport function useAdvancedMarkerRef() {\n  const [marker, setMarker] =\n    useState<google.maps.marker.AdvancedMarkerElement | null>(null);\n\n  const refCallback = useCallback((m: AdvancedMarkerRef | null) => {\n    setMarker(m);\n  }, []);\n\n  return [refCallback, marker] as const;\n}\n","/* eslint-disable complexity */\nimport React, {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useState\n} from 'react';\n\nimport {useMap} from '../hooks/use-map';\n\nimport type {Ref} from 'react';\n\ntype MarkerEventProps = {\n  onClick?: (e: google.maps.MapMouseEvent) => void;\n  onDrag?: (e: google.maps.MapMouseEvent) => void;\n  onDragStart?: (e: google.maps.MapMouseEvent) => void;\n  onDragEnd?: (e: google.maps.MapMouseEvent) => void;\n  onMouseOver?: (e: google.maps.MapMouseEvent) => void;\n  onMouseOut?: (e: google.maps.MapMouseEvent) => void;\n};\n\nexport type MarkerProps = Omit<google.maps.MarkerOptions, 'map'> &\n  MarkerEventProps;\n\nexport type MarkerRef = Ref<google.maps.Marker | null>;\n\nfunction useMarker(props: MarkerProps) {\n  const [marker, setMarker] = useState<google.maps.Marker | null>(null);\n  const map = useMap();\n\n  const {\n    onClick,\n    onDrag,\n    onDragStart,\n    onDragEnd,\n    onMouseOver,\n    onMouseOut,\n    ...markerOptions\n  } = props;\n\n  const {position, draggable} = markerOptions;\n\n  // create marker instance and add to the map once the map is available\n  useEffect(() => {\n    if (!map) {\n      if (map === undefined)\n        console.error('<Marker> has to be inside a Map component.');\n\n      return;\n    }\n\n    const newMarker = new google.maps.Marker(markerOptions);\n    newMarker.setMap(map);\n    setMarker(newMarker);\n\n    return () => {\n      newMarker.setMap(null);\n      setMarker(null);\n    };\n    // We do not want to re-render the whole marker when the options change.\n    // Marker options update is handled in a useEffect below.\n    // Excluding markerOptions from dependency array on purpose here.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map]);\n\n  // attach and re-attach event-handlers when any of the properties change\n  useEffect(() => {\n    if (!marker) return;\n\n    const m = marker;\n\n    // Add event listeners\n    const gme = google.maps.event;\n\n    if (onClick) gme.addListener(m, 'click', onClick);\n    if (onDrag) gme.addListener(m, 'drag', onDrag);\n    if (onDragStart) gme.addListener(m, 'dragstart', onDragStart);\n    if (onDragEnd) gme.addListener(m, 'dragend', onDragEnd);\n    if (onMouseOver) gme.addListener(m, 'mouseover', onMouseOver);\n    if (onMouseOut) gme.addListener(m, 'mouseout', onMouseOut);\n\n    marker.setDraggable(Boolean(draggable));\n\n    return () => {\n      gme.clearInstanceListeners(m);\n    };\n  }, [\n    marker,\n    draggable,\n    onClick,\n    onDrag,\n    onDragStart,\n    onDragEnd,\n    onMouseOver,\n    onMouseOut\n  ]);\n\n  // update markerOptions (note the dependencies aren't properly checked\n  // here, we just assume that setOptions is smart enough to not waste a\n  // lot of time updating values that didn't change)\n  useEffect(() => {\n    if (!marker) return;\n    if (markerOptions) marker.setOptions(markerOptions);\n  }, [marker, markerOptions]);\n\n  // update position when changed\n  useEffect(() => {\n    // Should not update position when draggable\n    if (draggable || !position || !marker) return;\n\n    marker.setPosition(position);\n  }, [draggable, position, marker]);\n\n  return marker;\n}\n\n/**\n * Component to render a marker on a map\n */\nexport const Marker = forwardRef((props: MarkerProps, ref: MarkerRef) => {\n  const marker = useMarker(props);\n\n  useImperativeHandle(ref, () => marker, [marker]);\n\n  return <></>;\n});\n\nexport function useMarkerRef() {\n  const [marker, setMarker] = useState<google.maps.Marker | null>(null);\n\n  const refCallback = useCallback((m: google.maps.Marker | null) => {\n    setMarker(m);\n  }, []);\n\n  return [refCallback, marker] as const;\n}\n"],"names":["module","exports","equal","a","b","constructor","length","i","keys","Array","isArray","RegExp","source","flags","valueOf","Object","prototype","toString","hasOwnProperty","call","key","APILoadingStatus","NOT_LOADED","LOADING","LOADED","FAILED","AUTH_FAILURE","GoogleMapsApiLoader","load","params","onLoadingStatusChange","_window$google","libraries","split","serializedParams","this","serializeParams","listeners","push","window","google","maps","importLibrary","serializedApiParams","loadingStatus","notifyLoadingStatusListeners","initImportLibrary","console","warn","librariesToLoad","Promise","all","map","name","v","language","region","authReferrerPolicy","solutionChannel","join","error","apiPromise","loadApi","resolve","reject","_document$querySelect","scriptElement","document","createElement","urlParams","URLSearchParams","value","entries","urlParamName","replace","t","toLowerCase","set","async","src","MAPS_API_BASE_URL","nonce","querySelector","onerror","Error","__googleMapsCallback__","gm_authFailure","head","append","libraryName","then","fn","APIProviderContext","React","APIProvider","props","children","loaderProps","_objectWithoutPropertiesLoose","_excluded2","mapInstances","addMapInstance","removeMapInstance","clearMapInstances","setMapInstances","useState","mapInstance","id","arguments","undefined","instances","_extends","_ref","_toPropertyKey","useMapInstances","status","loadedLibraries","onLoad","apiKey","version","otherApiParams","_excluded$3","setStatus","addLoadedLibrary","useReducer","action","librariesString","useMemo","JSON","stringify","useCallback","_google","res","useEffect","useGoogleMapsApiLoader","contextValue","Provider","createMapEvent","type","srcEvent","ev","detail","stoppable","stop","cameraEventTypes","includes","camEvent","center","getCenter","zoom","getZoom","heading","getHeading","tilt","getTilt","bounds","getBounds","Number","isFinite","toJSON","lat","lng","north","east","south","west","mouseEventTypes","_srcEvent$latLng","mouseEvent","domEvent","latLng","placeId","propNameToEventType","onBoundsChanged","onCenterChanged","onClick","onContextmenu","onDblclick","onDrag","onDragend","onDragstart","onHeadingChanged","onIdle","onIsFractionalZoomEnabledChanged","onMapCapabilitiesChanged","onMapTypeIdChanged","onMousemove","onMouseout","onMouseover","onProjectionChanged","onRenderingTypeChanged","onTilesLoaded","onTiltChanged","onZoomChanged","onCameraChanged","eventPropNames","useDeepCompareEffect","effect","deps","ref","useRef","current","isDeepEqual","mapOptionKeys","Set","useApiLoadingStatus","_useContext","useContext","toLatLngLiteral","obj","isLatLngLiteral","AuthFailureMessage","style","position","top","left","bottom","right","zIndex","display","flexFlow","textAlign","justifyContent","fontSize","color","background","padding","useApiIsLoaded","useTrackedCameraStateRef","forceUpdate","x","useForceUpdate","listener","event","addListener","assign","handleBoundsChange","remove","CachedMapStack","has","pop","useMapInstance","context","apiIsLoaded","setMap","container","containerRef","el","setEl","useCallbackRef","cameraStateRef","defaultBounds","defaultCenter","defaultZoom","defaultHeading","defaultTilt","reuseMaps","mapOptions","_excluded$2","hasZoom","hasCenter","savedMapStateRef","mapId","cacheKey","mapDiv","getDiv","appendChild","setOptions","setTimeout","setCenter","height","Map","fitBounds","savedMapId","cameraState","savedCameraState","clearInstanceListeners","GoogleMapsContext","className","mapRef","mapProps","useLayoutEffect","nextCamera","needsUpdate","moveCamera","useMapCameraParams","propName","handler","eventType","useMapEvents","useMapOptions","isDeckGlControlled","viewport","viewState","latitude","longitude","bearing","pitch","useDeckGLCameraUpdate","isControlledExternally","controlled","disableDefaultUI","gestureHandling","keyboardShortcuts","cameraOptions","_lat","_lng","_props$zoom","_props$heading","_props$tilt","combinedStyle","width","deckGLViewProps","shownMessages","logErrorOnce","_len","args","_key","add","useMap","ctx","useMapsLibrary","setValueForStyles","element","styles","prevStyles","elementStyle","styleName","indexOf","setProperty","cssFloat","setValueForStyle","isCustomProperty","unitlessNumbers","trim","useMapsEventListener","target","callback","usePropBinding","object","prop","AdvancedMarkerContext","AdvancedMarker","forwardRef","marker","contentContainer","setMarker","setContentContainer","prevStyleRef","markerLibrary","onDragStart","onDragEnd","collisionBehavior","clickable","draggable","title","numChildren","Children","count","newMarker","AdvancedMarkerElement","contentElement","content","_contentElement","gmpDraggable","gmpClickable","useAdvancedMarker","advancedMarkerContextValue","useImperativeHandle","createPortal","onMouseOver","onMouseOut","markerOptions","_excluded","Marker","m","gme","setDraggable","Boolean","setPosition","useMarker"],"sourceRoot":""}